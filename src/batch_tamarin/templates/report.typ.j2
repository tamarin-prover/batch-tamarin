#set page(
  paper: "a4",
  margin: (top: 1in, bottom: 1in, left: 1in, right: 1in),
  header: context [
    #set text(size: 10pt)
    #grid(
      columns: (1fr, 1fr),
      align: (left, right),
      [Batch Tamarin Execution Report],
      [#counter(page).display()]
    )
  ],
  footer: [
    #set text(size: 10pt)
    #align(center)[Generated on {{ report_data.generation_date.strftime('%Y-%m-%d at %H:%M:%S') }}]
  ]
)

#set text(font: "New Computer Modern", size: 11pt)
#set par(justify: true)
#set heading(numbering: "1.1")

#align(center)[
  #text(size: 18pt, weight: "bold")[Batch Tamarin Execution Report]

  #v(0.5em)

  #text(size: 12pt)[Generated by Batch Tamarin]

  #v(0.3em)

  #text(size: 10pt)[{{ report_data.generation_date.strftime('%Y-%m-%d %H:%M:%S') }}]
]

#v(1em)

= Overview

*Execution results from:* `{{ report_data.results_directory }}`
*Executed:* {{ report_data.batch_execution_date.strftime('%Y-%m-%d %H:%M:%S') }}

== Configuration

=== Global Settings

#table(
  columns: (1fr, 1fr),
  stroke: 0.5pt,
  [*Setting*], [*Value*],
  [Max cores], [{{ report_data.config.global_max_cores or 'Not specified' }}],
  [Max memory], [{{ report_data.config.global_max_memory or 'Not specified' }}GB],
  [Default timeout], [{{ report_data.config.default_timeout or 'Not specified' }}s],
  [Output directory], [`{{ report_data.config.output_directory or 'Not specified' }}`],
)

=== Tamarin Versions

#table(
  columns: (1fr, 2fr, 1fr),
  stroke: 0.5pt,
  [*Alias*], [*Path*], [*Version*],
  {% for alias, info in report_data.config.tamarin_versions.items() %}
  [{{ alias }}], [`{{ info.path }}`], [{{ info.version }}],
  {% endfor %}
)

== Summary

=== Global Statistics

#table(
  columns: (1fr, 1fr),
  stroke: 0.5pt,
  [*Metric*], [*Value*],
  [Total tasks], [{{ report_data.statistics.total_tasks }}],
  [Extracted lemmas], [{{ report_data.statistics.total_lemmas }}],
  [Cached lemmas], [{{ report_data.statistics.cache_hits }}],
  [Successful tasks], [#text(fill: green)[{{ report_data.statistics.successful_tasks }} ({{ "%.1f"|format(report_data.statistics.successful_tasks_percentage) }}%)]],
  [Failed tasks], [#text(fill: red)[{{ report_data.statistics.failed_tasks }} ({{ "%.1f"|format(report_data.statistics.failed_tasks_percentage) }}%)]],
  [Total runtime], [{{ "%.2f"|format(report_data.statistics.total_runtime) }}s],
  [Total memory usage (peak)], [{{ "%.2f"|format(report_data.statistics.total_memory_usage) }}MB],
)

=== Charts Overview

#figure(
  grid(
    columns: (1fr, 1fr),
    column-gutter: 2em,
    [
      // Simple pie chart representation using rectangles
      #stack(
        dir: ttb,
        spacing: 0.5em,
        [*Success Rate Distribution*],
        rect(
          width: 100% * {{ "%.3f"|format(report_data.statistics.successful_tasks_percentage / 100) }},
          height: 20pt,
          fill: green
        ),
        text(size: 10pt)[Successful: {{ "%.1f"|format(report_data.statistics.successful_tasks_percentage) }}%],
        rect(
          width: 100% * {{ "%.3f"|format(report_data.statistics.failed_tasks_percentage / 100) }},
          height: 20pt,
          fill: red
        ),
        text(size: 10pt)[Failed: {{ "%.1f"|format(report_data.statistics.failed_tasks_percentage) }}%]
      )
    ],
    [
      // Simple bar chart for cache performance
      #stack(
        dir: ttb,
        spacing: 0.5em,
        [*Cache Performance*],
        grid(
          columns: (1fr, 1fr),
          row-gutter: 0.5em,
          [Cached],
          rect(
            width: 60pt * {{ "%.3f"|format(report_data.statistics.cache_hits / report_data.statistics.total_tasks if report_data.statistics.total_tasks > 0 else 0) }},
            height: 20pt,
            fill: blue
          ),
          [Not Cached],
          rect(
            width: 60pt * {{ "%.3f"|format((report_data.statistics.total_tasks - report_data.statistics.cache_hits) / report_data.statistics.total_tasks if report_data.statistics.total_tasks > 0 else 0) }},
            height: 20pt,
            fill: gray
          )
        ),
        text(size: 10pt)[{{ report_data.statistics.cache_hits }} cached, {{ report_data.statistics.total_tasks - report_data.statistics.cache_hits }} not cached]
      )
    ]
  ),
  caption: [Performance Overview]
)

=== Runtime per Task

#table(
  columns: (1fr, 1fr),
  stroke: 0.5pt,
  [*Task*], [*Average Runtime (seconds)*],
  {% for task in report_data.tasks %}
  [{{ task.name }}], [{{ "%.2f"|format((task.results|sum(attribute='runtime')/task.results|length) if task.results else 0) }}],
  {% endfor %}
)

=== Memory Usage per Task

#table(
  columns: (1fr, 1fr),
  stroke: 0.5pt,
  [*Task*], [*Average Memory Usage (MB)*],
  {% for task in report_data.tasks %}
  [{{ task.name }}], [{{ "%.2f"|format((task.results|sum(attribute='peak_memory')/task.results|length) if task.results else 0) }}],
  {% endfor %}
)

=== Execution Timeline

#table(
  columns: (1fr, 1fr, 1fr),
  stroke: 0.5pt,
  [*Task*], [*Total Runtime (seconds)*], [*Results Count*],
  {% for task in report_data.tasks %}
  [{{ task.name }}], [{{ "%.2f"|format(task.results|sum(attribute='runtime') if task.results else 0) }}], [{{ task.results|length }}],
  {% endfor %}
)

= Task Details

{% for task in report_data.tasks %}
== Task: {{ task.name }}

=== Execution Summary

#table(
  columns: (1fr, 1fr, 0.5fr, 0.5fr, 0.5fr, 1fr, 1fr, 1fr, 1fr, 0.5fr),
  stroke: 0.5pt,
  [*Lemma*], [*Options*], [*Cores*], [*Memory*], [*Timeout*], [*Tamarin Version*], [*Status*], [*Memory Used*], [*Runtime*], [*Cache Hit*],
  {% for result in task.results %}
  [`{{ result.lemma }}`],
  [{{ result.tamarin_options|join(' ') if result.tamarin_options else 'None' }}],
  [{{ result.max_cores or 'Default' }}],
  [{{ result.max_memory or 'Default' }}GB],
  [{{ result.timeout or 'Default' }}s],
  [{{ result.tamarin_version }}],
  [{% if result.status == "success" %}#text(fill: green)[✓ Success]{% else %}#text(fill: red)[✗ Failed]{% endif %}],
  [{{ "%.2f"|format(result.peak_memory) }}MB],
  [{{ "%.2f"|format(result.runtime) }}s],
  [{% if result.cache_hit %}#text(fill: green)[✓]{% else %}#text(fill: red)[✗]{% endif %}],
  {% endfor %}
)

{% set task_traces = report_data.traces|filter_traces_by_task(task)|list %}
{% if task_traces %}
=== Traces

{% for trace in task_traces %}
*{{ trace.lemma }}* ({{ trace.tamarin_version }}):

- *JSON File:* `{{ trace.json_file|relative_from_report }}`
{% if trace.dot_file %}
- *DOT File:* `{{ trace.dot_file|relative_from_report }}`
{% endif %}

{% if trace.dot_file %}
{% set svg_file = trace.dot_file|replace('.dot', '.svg')|relative_from_report %}
#figure(
  image("{{ svg_file }}", width: 80%, height: 400pt, fit: "contain"),
  caption: [Trace visualization for {{ trace.lemma }}]
)
{% elif trace.svg_content %}
#figure(
  raw(trace.svg_content, lang: "svg"),
  caption: [Trace visualization for {{ trace.lemma }}]
)
{% endif %}
{% endfor %}
{% endif %}

{% endfor %}

{% set failed_results = report_data.failed_results %}
{% if failed_results %}
= Errors

== Error Summary


#figure(
  table(
    columns: (1fr, 1fr, 1fr, 1fr, 1fr, 1fr, 2fr),
    stroke: 0.5pt,
    [*Task*], [*Lemma*], [*Version*], [*Options*], [*Resources*], [*Error Type*], [*Description*],
    {% for error in report_data.error_details %}
    [`{{ error.task }}`],
    [`{{ error.lemma }}`],
    [{{ error.version }}],
    [{{ error.options }}],
    [{{ error.resources }}],
    [{{ error.type }}],
    [{{ error.message }}],
    {% endfor %}
  ),
  caption: [Detailed Error Information]
)

== Detailed Error Information

{% for result in failed_results %}
=== {{ result.task_name }}--{{ result.lemma }}--{{ result.tamarin_version }}

{{ result.error_description }}

{% if result.stderr_lines %}
```bash
{{ result.stderr_lines|join('\n') }}
```
{% endif %}
{% endfor %}
{% endif %}

#v(1fr)

#align(center)[
  #text(size: 10pt, style: "italic")[Report generated by Batch Tamarin v{{ version or 'unknown' }} on {{ report_data.generation_date.strftime('%Y-%m-%d at %H:%M:%S') }}]
]
