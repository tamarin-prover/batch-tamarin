theory SimpleChallengeResponse begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, fst/1, h/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(m, pk(k)), k) = m,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2





rule (modulo E) Register_pk:
   [ Fr( ~ltk ) ]
  -->
   [ !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), Out( pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_1:
   [ Fr( ~k ), !Pk( $S, pkS ) ]
  -->
   [ Client_1( $S, ~k ), Out( aenc(<'1', ~k>, pkS) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_2:
   [ Client_1( S, k ), In( h(k) ) ] --[ SessKeyC( S, k ) ]-> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Serv_1:
   [ !Ltk( $S, ~ltkS ), In( aenc(<'1', k>, pk(~ltkS)) ) ]
  --[ AnswerRequest( $S, k ) ]->
   [ Out( h(k) ) ]

  /* has exactly the trivial AC variant */

lemma Client_auth_injective:
  all-traces
  "∀ S k #i.
    (SessKeyC( S, k ) @ #i) ⇒
    (∃ #a.
      (AnswerRequest( S, k ) @ #a) ∧
      (∀ #j. (SessKeyC( S, k ) @ #j) ⇒ (#i = #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ S k #i.
  (SessKeyC( S, k ) @ #i)
 ∧
  ∀ #a.
   (AnswerRequest( S, k ) @ #a)
  ⇒
   ∃ #j. (SessKeyC( S, k ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma Client_session_key_setup:
  exists-trace "∃ S k #i. SessKeyC( S, k ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ S k #i. (SessKeyC( S, k ) @ #i)"
*/
simplify
solve( Client_1( S, k ) ▶₀ #i )
  case Client_1
  solve( !KU( h(~k) ) @ #vk )
    case Serv_1
    solve( !KU( aenc(<'1', ~k>, pk(~ltkS)) ) @ #vk.1 )
      case Client_1
      SOLVED // trace found
    qed
  qed
qed















/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.10.0
Maude version 3.4
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2024-10-30 13:42:18.081591 UTC
*/

end
