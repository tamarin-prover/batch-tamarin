theory Minimal_HashChain begin

// Function signature and definition of the equational theory E

functions: f/1, fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2





/* looping facts with injective instances: Gen/2, Loop/3 */

rule (modulo E) Gen_Start:
   [ Fr( seed ) ] --> [ Gen( seed, seed ), Out( seed ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Gen_Step:
   [ Gen( seed, chain ) ]
  --[ ChainKey( chain ) ]->
   [ Gen( seed, f(chain) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Gen_Stop:
   [ Gen( seed, kZero ) ] --[ ChainKey( kZero ) ]-> [ !Final( kZero ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Check0:
   [ In( kOrig ), Fr( loopId ) ]
  --[ Start( loopId, kOrig ) ]->
   [ Loop( loopId, kOrig, kOrig ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Check:
   [ Loop( loopId, k, kOrig ) ]
  --[ Loop( loopId, k, kOrig ) ]->
   [ Loop( loopId, f(k), kOrig ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Success:
   [ Loop( loopId, kZero, kOrig ), !Final( kZero ) ]
  --[ Success( loopId, kOrig ) ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma Auxiliary_Success_chain [use_induction, reuse]:
  all-traces
  "∀ lid kZero k #x #y.
    ((Loop( lid, kZero, k ) @ #x) ∧ (ChainKey( kZero ) @ #y)) ⇒
    (∃ #z. ChainKey( k ) @ #z)"
/*
guarded formula characterizing all counter-examples:
"∃ lid kZero k #x #y.
  (Loop( lid, kZero, k ) @ #x) ∧ (ChainKey( kZero ) @ #y)
 ∧
  ∀ #z. (ChainKey( k ) @ #z) ⇒ ⊥"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  solve( (last(#y))  ∥ (last(#x))  ∥
         (∃ #z. (ChainKey( k ) @ #z) ∧ ¬(last(#z))) )
    case case_1
    solve( ChainKey( kZero ) @ #y )
      case Gen_Step
      solve( Loop( lid, kZero, k ) ▶₀ #x )
        case Check
        solve( Gen( seed, f(k) ) ▶₀ #y )
          case Gen_Step
          by contradiction /* from formulas */
        qed
      next
        case Check0
        by contradiction /* from formulas */
      qed
    next
      case Gen_Stop
      solve( Gen( seed, kZero ) ▶₀ #y )
        case Gen_Start
        solve( Loop( lid, ~n, k ) ▶₀ #x )
          case Check0
          by contradiction /* from formulas */
        qed
      next
        case Gen_Step
        solve( Loop( lid, f(chain), k ) ▶₀ #x )
          case Check
          by contradiction /* from formulas */
        next
          case Check0
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_2
    solve( ChainKey( kZero ) @ #y )
      case Gen_Step
      solve( Loop( lid, kZero, k ) ▶₀ #x )
        case Check
        solve( Gen( seed, f(k) ) ▶₀ #y )
          case Gen_Step
          by contradiction /* from formulas */
        qed
      next
        case Check0
        by contradiction /* from formulas */
      qed
    next
      case Gen_Stop
      solve( Gen( seed, kZero ) ▶₀ #y )
        case Gen_Start
        solve( Loop( lid, ~n, k ) ▶₀ #x )
          case Check0
          by contradiction /* from formulas */
        qed
      next
        case Gen_Step
        solve( Loop( lid, f(chain), k ) ▶₀ #x )
          case Check
          by contradiction /* from formulas */
        next
          case Check0
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_3
    by contradiction /* from formulas */
  qed
qed

lemma Success_chain:
  all-traces
  "∀ lid k #i. (Success( lid, k ) @ #i) ⇒ (∃ #j. ChainKey( k ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ lid k #i. (Success( lid, k ) @ #i) ∧ ∀ #j. (ChainKey( k ) @ #j) ⇒ ⊥"
*/
by sorry









/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.4
Git revision: 689a25737fd061027606a12889edcf3347d84267, branch: dev
Compiled at: 2025-06-20 07:25:48.92758 UTC
*/

end
